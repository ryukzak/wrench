0:	input_addr
4:	output_addr
8:	_start
40:	factorial_while
60:	factorial_0
68:	factorial_not_in_domain
76:	factorial_overflow
84:	factorial_end
---
mem[0..3]: 	80 00 00 00	@"input_addr"
mem[4..7]: 	84 00 00 00	@"output_addr"
mem[8..11]: 	MoveA {mode = Long, src = Immediate 0, dst = DirectAddrReg A6} 	@_start
mem[12..15]: 	MoveA {mode = Long, src = IndirectAddrReg 0 A6, dst = DirectAddrReg A6}
mem[16..19]: 	MoveA {mode = Long, src = Immediate 4, dst = DirectAddrReg A7}
mem[20..23]: 	MoveA {mode = Long, src = IndirectAddrReg 0 A7, dst = DirectAddrReg A7}
mem[24..27]: 	Move {mode = Long, src = IndirectAddrReg 0 A6, dst = DirectDataReg D0}
mem[28..31]: 	Beq {ref = 60}
mem[32..35]: 	Ble {ref = 68}
mem[36..39]: 	Move {mode = Long, src = DirectDataReg D0, dst = DirectDataReg D1}
mem[40..43]: 	Sub {mode = Long, src = Immediate 1, dst = DirectDataReg D1} 	@factorial_while
mem[44..47]: 	Beq {ref = 84}
mem[48..51]: 	Mul {mode = Long, src = DirectDataReg D1, dst = DirectDataReg D0}
mem[52..55]: 	Bvs {ref = 76}
mem[56..59]: 	Jmp {ref = 40}
mem[60..63]: 	Move {mode = Long, src = Immediate 1, dst = DirectDataReg D0} 	@factorial_0
mem[64..67]: 	Jmp {ref = 84}
mem[68..71]: 	Move {mode = Long, src = Immediate (-1), dst = DirectDataReg D0} 	@factorial_not_in_domain
mem[72..75]: 	Jmp {ref = 84}
mem[76..79]: 	Move {mode = Long, src = Immediate (-858993460), dst = DirectDataReg D0} 	@factorial_overflow
mem[80..83]: 	Jmp {ref = 84}
mem[84..87]: 	Move {mode = Long, src = DirectDataReg D0, dst = IndirectAddrReg 0 A7} 	@factorial_end
mem[88..91]: 	Halt
mem[92..999]: 	( 00 )
---
