0:	input_addr
4:	output_addr
8:	n
12:	result
16:	const_1
20:	const_2
24:	const_3
28:	const_4
32:	const_5
36:	temp
40:	_start
284:	jump_target
---
mem[0..3]: 	80 00 00 00	@"input_addr"
mem[4..7]: 	84 00 00 00	@"output_addr"
mem[8..11]: 	00 00 00 00	@"n"
mem[12..15]: 	01 00 00 00	@"result"
mem[16..19]: 	01 00 00 00	@"const_1"
mem[20..23]: 	02 00 00 00	@"const_2"
mem[24..27]: 	03 00 00 00	@"const_3"
mem[28..31]: 	04 00 00 00	@"const_4"
mem[32..35]: 	05 00 00 00	@"const_5"
mem[36..39]: 	00 00 00 00	@"temp"
mem[40..44]: 	LoadImm 16 	@_start
mem[45..49]: 	StoreAddr 36
mem[50..54]: 	LoadAddr 16
mem[55..59]: 	StoreAddr 36
mem[60..62]: 	Load 2
mem[63..67]: 	StoreAddr 36
mem[68..70]: 	Load (-68)
mem[71..71]: 	LoadAcc
mem[72..76]: 	StoreAddr 36
mem[77..81]: 	LoadImm 32
mem[82..86]: 	StoreAddr 36
mem[87..89]: 	Load 48
mem[90..92]: 	Store 2
mem[93..97]: 	LoadImm 64
mem[98..102]: 	StoreInd 0
mem[103..107]: 	LoadAddr 20
mem[108..110]: 	Add 24
mem[111..115]: 	StoreAddr 36
mem[116..120]: 	LoadAddr 32
mem[121..123]: 	Sub 24
mem[124..128]: 	StoreAddr 36
mem[129..133]: 	LoadAddr 20
mem[134..136]: 	Mul 24
mem[137..141]: 	StoreAddr 36
mem[142..146]: 	LoadAddr 32
mem[147..149]: 	Div 20
mem[150..154]: 	StoreAddr 36
mem[155..159]: 	LoadAddr 32
mem[160..162]: 	Rem 24
mem[163..167]: 	StoreAddr 36
mem[168..172]: 	LoadAddr 16
mem[173..175]: 	ShiftL 20
mem[176..180]: 	StoreAddr 36
mem[181..185]: 	LoadAddr 28
mem[186..188]: 	ShiftR 16
mem[189..193]: 	StoreAddr 36
mem[194..198]: 	LoadAddr 24
mem[199..201]: 	And 16
mem[202..206]: 	StoreAddr 36
mem[207..211]: 	LoadAddr 20
mem[212..214]: 	Or 16
mem[215..219]: 	StoreAddr 36
mem[220..224]: 	LoadAddr 24
mem[225..227]: 	Xor 16
mem[228..232]: 	StoreAddr 36
mem[233..237]: 	LoadAddr 32
mem[238..238]: 	Not
mem[239..243]: 	StoreAddr 36
mem[244..248]: 	LoadImm 0
mem[249..253]: 	Beqz 284
mem[254..258]: 	LoadImm 1
mem[259..263]: 	Bnez 284
mem[264..268]: 	LoadImm 2
mem[269..273]: 	Bgz 284
mem[274..278]: 	LoadImm 255
mem[279..283]: 	Blz 284
mem[284..284]: 	Halt 	@jump_target
mem[285..999]: 	( 00 )
---
